{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ezequ\\\\Desktop\\\\Estudio\\\\UNS\\\\Tercer A\\xF1o\\\\Primer cuatrimestre\\\\L\\xF3gica para ciencias de la computaci\\xF3n\\\\Proyecto\\\\Proyecto-LCC\\\\src\\\\Board.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport Square from './Square';\nimport Connector from './Connector';\nimport { valueInPos, numberToColor, connectionInPath, posInPath, isAdyacent, equalPos } from './util';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board(_ref) {\n  _s();\n  let {\n    grid,\n    numOfColumns,\n    path,\n    onPathChange,\n    onDone\n  } = _ref;\n  function onSquareClick(pos) {\n    if (path.length === 0) {\n      // Clicked the first square, so init the path with that square.\n      onPathChange([pos]);\n    } else if (equalPos(path[path.length - 1], pos)) {\n      // Clicked the last square in the path\n      if (path.length === 1) {\n        // If it's the only square in the path, then stop collecting the path (reset to empty).\n        onPathChange([]);\n      } else {\n        // Otherwise, trigger the game move.\n        onDone();\n      }\n    }\n  }\n  function onSquareHover(pos) {\n    if (path.length === 0) {\n      // Ignore square hover if not collecting a path.\n      return;\n    }\n    if (isAdyacent(pos, path[path.length - 1])) {\n      if (path.length > 1 && equalPos(pos, path[path.length - 2])) {\n        // Remove the last square in the path if returned to the previous one\n        onPathChange(path.slice(0, path.length - 1));\n      } else if (!posInPath(pos, path) && (valueInPos(pos, grid, numOfColumns) === valueInPos(path[path.length - 1], grid, numOfColumns) || path.length > 1 && valueInPos(pos, grid, numOfColumns) === 2 * valueInPos(path[path.length - 1], grid, numOfColumns))) {\n        onPathChange(path.concat([pos])); // Add a square to the path if adyacent, not already in the path, and equal or next power than the last in the path\n      }\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", e => {\n      if (e.key === \"Escape\") {\n        onPathChange([]);\n      }\n    });\n  }, []);\n  const numOfRows = grid.length / numOfColumns;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"squares\",\n      style: {\n        gridTemplateColumns: `repeat(${numOfColumns}, 80px)`,\n        gridTemplateRows: `repeat(${numOfRows}, 80px)`\n      },\n      children: grid.map((num, i) => {\n        const pos = [Math.floor(i / numOfColumns), i % numOfColumns];\n        return /*#__PURE__*/_jsxDEV(Square, {\n          value: num,\n          onClick: () => onSquareClick(pos),\n          onMouseEnter: () => onSquareHover(pos),\n          className: path.length === 0 ? \"riseOnHover\" : equalPos(path[path.length - 1], pos) ? \"rise\" : undefined\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"horizontalConnectors\",\n      style: {\n        gridTemplateColumns: `repeat(${numOfColumns - 1}, 80px)`,\n        gridTemplateRows: `repeat(${numOfRows}, 80px)`\n      },\n      children: Array.from({\n        length: numOfRows * (numOfColumns - 1)\n      }, (_, i) => {\n        const row = Math.floor(i / (numOfColumns - 1));\n        const column = i % (numOfColumns - 1);\n        const posA = [row, column];\n        const posB = [row, column + 1];\n        let from;\n        if (connectionInPath(posA, posB, path)) {\n          from = posA;\n        } else if (connectionInPath(posB, posA, path)) {\n          from = posB;\n        }\n        return /*#__PURE__*/_jsxDEV(Connector, {\n          type: \"horizontal\",\n          color: from !== undefined ? numberToColor(grid[from[0] * numOfColumns + from[1]]) : undefined\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"verticalConnectors\",\n      style: {\n        gridTemplateColumns: `repeat(${numOfColumns}, 80px)`,\n        gridTemplateRows: `repeat(${numOfRows - 1}, 80px)`\n      },\n      children: Array.from({\n        length: (numOfRows - 1) * numOfColumns\n      }, (_, i) => {\n        const row = Math.floor(i / numOfColumns);\n        const column = i % numOfColumns;\n        const posA = [row, column];\n        const posB = [row + 1, column];\n        let from;\n        if (connectionInPath(posA, posB, path)) {\n          from = posA;\n        } else if (connectionInPath(posB, posA, path)) {\n          from = posB;\n        }\n        return /*#__PURE__*/_jsxDEV(Connector, {\n          type: \"vertical\",\n          color: from !== undefined ? numberToColor(grid[from[0] * numOfColumns + from[1]]) : undefined\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"slashConnectors\",\n      style: {\n        gridTemplateColumns: `repeat(${numOfColumns - 1}, 80px)`,\n        gridTemplateRows: `repeat(${numOfRows - 1}, 80px)`\n      },\n      children: Array.from({\n        length: (numOfRows - 1) * (numOfColumns - 1)\n      }, (_, i) => {\n        const row = Math.floor(i / (numOfColumns - 1));\n        const column = i % (numOfColumns - 1);\n        const posA = [row, column + 1];\n        const posB = [row + 1, column];\n        let from;\n        if (connectionInPath(posA, posB, path)) {\n          from = posA;\n        } else if (connectionInPath(posB, posA, path)) {\n          from = posB;\n        }\n        return /*#__PURE__*/_jsxDEV(Connector, {\n          type: \"slash\",\n          color: from !== undefined ? numberToColor(grid[from[0] * numOfColumns + from[1]]) : undefined\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"backslashConnectors\",\n      style: {\n        gridTemplateColumns: `repeat(${numOfColumns - 1}, 80px)`,\n        gridTemplateRows: `repeat(${numOfRows - 1}, 80px)`\n      },\n      children: Array.from({\n        length: (numOfRows - 1) * (numOfColumns - 1)\n      }, (_, i) => {\n        const row = Math.floor(i / (numOfColumns - 1));\n        const column = i % (numOfColumns - 1);\n        const posA = [row, column];\n        const posB = [row + 1, column + 1];\n        let from;\n        if (connectionInPath(posA, posB, path)) {\n          from = posA;\n        } else if (connectionInPath(posB, posA, path)) {\n          from = posB;\n        }\n        return /*#__PURE__*/_jsxDEV(Connector, {\n          type: \"backslash\",\n          color: from !== undefined ? numberToColor(grid[from[0] * numOfColumns + from[1]]) : undefined\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n_s(Board, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useEffect","Square","Connector","valueInPos","numberToColor","connectionInPath","posInPath","isAdyacent","equalPos","jsxDEV","_jsxDEV","Board","_ref","_s","grid","numOfColumns","path","onPathChange","onDone","onSquareClick","pos","length","onSquareHover","slice","concat","window","addEventListener","e","key","numOfRows","className","children","style","gridTemplateColumns","gridTemplateRows","map","num","i","Math","floor","value","onClick","onMouseEnter","undefined","fileName","_jsxFileName","lineNumber","columnNumber","Array","from","_","row","column","posA","posB","type","color","_c","$RefreshReg$"],"sources":["C:/Users/ezequ/Desktop/Estudio/UNS/Tercer Año/Primer cuatrimestre/Lógica para ciencias de la computación/Proyecto/Proyecto-LCC/src/Board.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport Square from './Square';\r\nimport Connector from './Connector';\r\nimport { valueInPos, numberToColor, connectionInPath, posInPath, isAdyacent, equalPos } from './util';\r\n\r\nfunction Board({ grid, numOfColumns, path, onPathChange, onDone }) {\r\n\r\n    function onSquareClick(pos) {\r\n        if (path.length === 0) {    // Clicked the first square, so init the path with that square.\r\n            onPathChange([pos]);\r\n        } else if (equalPos(path[path.length - 1], pos)) {  // Clicked the last square in the path\r\n            if (path.length === 1) {    // If it's the only square in the path, then stop collecting the path (reset to empty).\r\n                onPathChange([]);\r\n            } else {                    // Otherwise, trigger the game move.\r\n                onDone();\r\n            }\r\n        }\r\n    }\r\n\r\n    function onSquareHover(pos) {\r\n        if (path.length === 0) {    // Ignore square hover if not collecting a path.\r\n            return;\r\n        }\r\n        if (isAdyacent(pos, path[path.length - 1])) {\r\n            if (path.length > 1 && equalPos(pos, path[path.length - 2])) {  // Remove the last square in the path if returned to the previous one\r\n                onPathChange(path.slice(0, path.length - 1));\r\n            } else if (!posInPath(pos, path) &&\r\n                (valueInPos(pos, grid, numOfColumns) === valueInPos(path[path.length - 1], grid, numOfColumns)\r\n                    || (path.length > 1 && valueInPos(pos, grid, numOfColumns) === 2 * valueInPos(path[path.length - 1], grid, numOfColumns)))) {\r\n                onPathChange(path.concat([pos]));   // Add a square to the path if adyacent, not already in the path, and equal or next power than the last in the path\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"keydown\", e => {\r\n            if (e.key === \"Escape\") {\r\n                onPathChange([]);\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    const numOfRows = grid.length / numOfColumns;\r\n    return (\r\n        <div className=\"board\">\r\n            <div className=\"squares\" style={{ gridTemplateColumns: `repeat(${numOfColumns}, 80px)`, gridTemplateRows: `repeat(${numOfRows}, 80px)` }}>\r\n                {grid.map((num, i) => {\r\n                    const pos = [Math.floor(i / numOfColumns), i % numOfColumns];\r\n                    return (\r\n                        <Square\r\n                            value={num}\r\n                            onClick={() => onSquareClick(pos)}\r\n                            onMouseEnter={() => onSquareHover(pos)}\r\n                            className={path.length === 0 ? \"riseOnHover\" : equalPos(path[path.length - 1], pos) ? \"rise\" : undefined}\r\n                            key={i}\r\n                        />\r\n                    );\r\n                })}\r\n            </div>\r\n            <div className=\"horizontalConnectors\" style={{ gridTemplateColumns: `repeat(${numOfColumns - 1}, 80px)`, gridTemplateRows: `repeat(${numOfRows}, 80px)` }}>\r\n                {Array.from({ length: numOfRows * (numOfColumns - 1) }, (_, i) => {\r\n                    const row = Math.floor(i / (numOfColumns - 1));\r\n                    const column = i % (numOfColumns - 1);\r\n                    const posA = [row, column];\r\n                    const posB = [row, column + 1];\r\n                    let from;\r\n                    if (connectionInPath(posA, posB, path)) {\r\n                        from = posA;\r\n                    } else if (connectionInPath(posB, posA, path)) {\r\n                        from = posB;\r\n                    }\r\n                    return <Connector type={\"horizontal\"} color={from !== undefined ? numberToColor(grid[from[0] * numOfColumns + from[1]]) : undefined} key={i} />;\r\n                })}\r\n            </div>\r\n            <div className=\"verticalConnectors\" style={{ gridTemplateColumns: `repeat(${numOfColumns}, 80px)`, gridTemplateRows: `repeat(${numOfRows - 1}, 80px)` }}>\r\n                {Array.from({ length: (numOfRows - 1) * numOfColumns }, (_, i) => {\r\n                    const row = Math.floor(i / numOfColumns);\r\n                    const column = i % numOfColumns;\r\n                    const posA = [row, column];\r\n                    const posB = [row + 1, column];\r\n                    let from;\r\n                    if (connectionInPath(posA, posB, path)) {\r\n                        from = posA;\r\n                    } else if (connectionInPath(posB, posA, path)) {\r\n                        from = posB;\r\n                    }\r\n                    return <Connector type={\"vertical\"} color={from !== undefined ? numberToColor(grid[from[0] * numOfColumns + from[1]]) : undefined} key={i} />;\r\n                })}\r\n            </div>\r\n            <div className=\"slashConnectors\" style={{ gridTemplateColumns: `repeat(${numOfColumns - 1}, 80px)`, gridTemplateRows: `repeat(${numOfRows - 1}, 80px)` }}>\r\n                {Array.from({ length: (numOfRows - 1) * (numOfColumns - 1) }, (_, i) => {\r\n                    const row = Math.floor(i / (numOfColumns - 1));\r\n                    const column = i % (numOfColumns - 1);\r\n                    const posA = [row, column + 1];\r\n                    const posB = [row + 1, column];\r\n                    let from;\r\n                    if (connectionInPath(posA, posB, path)) {\r\n                        from = posA;\r\n                    } else if (connectionInPath(posB, posA, path)) {\r\n                        from = posB;\r\n                    }\r\n                    return <Connector type={\"slash\"} color={from !== undefined ? numberToColor(grid[from[0] * numOfColumns + from[1]]) : undefined} key={i} />;\r\n                })}\r\n            </div>\r\n            <div className=\"backslashConnectors\" style={{ gridTemplateColumns: `repeat(${numOfColumns - 1}, 80px)`, gridTemplateRows: `repeat(${numOfRows - 1}, 80px)` }}>\r\n                {Array.from({ length: (numOfRows - 1) * (numOfColumns - 1) }, (_, i) => {\r\n                    const row = Math.floor(i / (numOfColumns - 1));\r\n                    const column = i % (numOfColumns - 1);\r\n                    const posA = [row, column];\r\n                    const posB = [row + 1, column + 1];\r\n                    let from;\r\n                    if (connectionInPath(posA, posB, path)) {\r\n                        from = posA;\r\n                    } else if (connectionInPath(posB, posA, path)) {\r\n                        from = posB;\r\n                    }\r\n                    return <Connector type={\"backslash\"} color={from !== undefined ? numberToColor(grid[from[0] * numOfColumns + from[1]]) : undefined} key={i} />;\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Board;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,SAAS,MAAM,aAAa;AACnC,SAASC,UAAU,EAAEC,aAAa,EAAEC,gBAAgB,EAAEC,SAAS,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtG,SAASC,KAAKA,CAAAC,IAAA,EAAqD;EAAAC,EAAA;EAAA,IAApD;IAAEC,IAAI;IAAEC,YAAY;IAAEC,IAAI;IAAEC,YAAY;IAAEC;EAAO,CAAC,GAAAN,IAAA;EAE7D,SAASO,aAAaA,CAACC,GAAG,EAAE;IACxB,IAAIJ,IAAI,CAACK,MAAM,KAAK,CAAC,EAAE;MAAK;MACxBJ,YAAY,CAAC,CAACG,GAAG,CAAC,CAAC;IACvB,CAAC,MAAM,IAAIZ,QAAQ,CAACQ,IAAI,CAACA,IAAI,CAACK,MAAM,GAAG,CAAC,CAAC,EAAED,GAAG,CAAC,EAAE;MAAG;MAChD,IAAIJ,IAAI,CAACK,MAAM,KAAK,CAAC,EAAE;QAAK;QACxBJ,YAAY,CAAC,EAAE,CAAC;MACpB,CAAC,MAAM;QAAqB;QACxBC,MAAM,EAAE;MACZ;IACJ;EACJ;EAEA,SAASI,aAAaA,CAACF,GAAG,EAAE;IACxB,IAAIJ,IAAI,CAACK,MAAM,KAAK,CAAC,EAAE;MAAK;MACxB;IACJ;IACA,IAAId,UAAU,CAACa,GAAG,EAAEJ,IAAI,CAACA,IAAI,CAACK,MAAM,GAAG,CAAC,CAAC,CAAC,EAAE;MACxC,IAAIL,IAAI,CAACK,MAAM,GAAG,CAAC,IAAIb,QAAQ,CAACY,GAAG,EAAEJ,IAAI,CAACA,IAAI,CAACK,MAAM,GAAG,CAAC,CAAC,CAAC,EAAE;QAAG;QAC5DJ,YAAY,CAACD,IAAI,CAACO,KAAK,CAAC,CAAC,EAAEP,IAAI,CAACK,MAAM,GAAG,CAAC,CAAC,CAAC;MAChD,CAAC,MAAM,IAAI,CAACf,SAAS,CAACc,GAAG,EAAEJ,IAAI,CAAC,KAC3Bb,UAAU,CAACiB,GAAG,EAAEN,IAAI,EAAEC,YAAY,CAAC,KAAKZ,UAAU,CAACa,IAAI,CAACA,IAAI,CAACK,MAAM,GAAG,CAAC,CAAC,EAAEP,IAAI,EAAEC,YAAY,CAAC,IACtFC,IAAI,CAACK,MAAM,GAAG,CAAC,IAAIlB,UAAU,CAACiB,GAAG,EAAEN,IAAI,EAAEC,YAAY,CAAC,KAAK,CAAC,GAAGZ,UAAU,CAACa,IAAI,CAACA,IAAI,CAACK,MAAM,GAAG,CAAC,CAAC,EAAEP,IAAI,EAAEC,YAAY,CAAE,CAAC,EAAE;QAChIE,YAAY,CAACD,IAAI,CAACQ,MAAM,CAAC,CAACJ,GAAG,CAAC,CAAC,CAAC,CAAC,CAAG;MACxC;IACJ;EACJ;;EAEApB,SAAS,CAAC,MAAM;IACZyB,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEC,CAAC,IAAI;MACpC,IAAIA,CAAC,CAACC,GAAG,KAAK,QAAQ,EAAE;QACpBX,YAAY,CAAC,EAAE,CAAC;MACpB;IACJ,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMY,SAAS,GAAGf,IAAI,CAACO,MAAM,GAAGN,YAAY;EAC5C,oBACIL,OAAA;IAAKoB,SAAS,EAAC,OAAO;IAAAC,QAAA,gBAClBrB,OAAA;MAAKoB,SAAS,EAAC,SAAS;MAACE,KAAK,EAAE;QAAEC,mBAAmB,EAAG,UAASlB,YAAa,SAAQ;QAAEmB,gBAAgB,EAAG,UAASL,SAAU;MAAS,CAAE;MAAAE,QAAA,EACpIjB,IAAI,CAACqB,GAAG,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;QAClB,MAAMjB,GAAG,GAAG,CAACkB,IAAI,CAACC,KAAK,CAACF,CAAC,GAAGtB,YAAY,CAAC,EAAEsB,CAAC,GAAGtB,YAAY,CAAC;QAC5D,oBACIL,OAAA,CAACT,MAAM;UACHuC,KAAK,EAAEJ,GAAI;UACXK,OAAO,EAAEA,CAAA,KAAMtB,aAAa,CAACC,GAAG,CAAE;UAClCsB,YAAY,EAAEA,CAAA,KAAMpB,aAAa,CAACF,GAAG,CAAE;UACvCU,SAAS,EAAEd,IAAI,CAACK,MAAM,KAAK,CAAC,GAAG,aAAa,GAAGb,QAAQ,CAACQ,IAAI,CAACA,IAAI,CAACK,MAAM,GAAG,CAAC,CAAC,EAAED,GAAG,CAAC,GAAG,MAAM,GAAGuB;QAAU,GACpGN,CAAC;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACR;MAEV,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACA,eACNrC,OAAA;MAAKoB,SAAS,EAAC,sBAAsB;MAACE,KAAK,EAAE;QAAEC,mBAAmB,EAAG,UAASlB,YAAY,GAAG,CAAE,SAAQ;QAAEmB,gBAAgB,EAAG,UAASL,SAAU;MAAS,CAAE;MAAAE,QAAA,EACrJiB,KAAK,CAACC,IAAI,CAAC;QAAE5B,MAAM,EAAEQ,SAAS,IAAId,YAAY,GAAG,CAAC;MAAE,CAAC,EAAE,CAACmC,CAAC,EAAEb,CAAC,KAAK;QAC9D,MAAMc,GAAG,GAAGb,IAAI,CAACC,KAAK,CAACF,CAAC,IAAItB,YAAY,GAAG,CAAC,CAAC,CAAC;QAC9C,MAAMqC,MAAM,GAAGf,CAAC,IAAItB,YAAY,GAAG,CAAC,CAAC;QACrC,MAAMsC,IAAI,GAAG,CAACF,GAAG,EAAEC,MAAM,CAAC;QAC1B,MAAME,IAAI,GAAG,CAACH,GAAG,EAAEC,MAAM,GAAG,CAAC,CAAC;QAC9B,IAAIH,IAAI;QACR,IAAI5C,gBAAgB,CAACgD,IAAI,EAAEC,IAAI,EAAEtC,IAAI,CAAC,EAAE;UACpCiC,IAAI,GAAGI,IAAI;QACf,CAAC,MAAM,IAAIhD,gBAAgB,CAACiD,IAAI,EAAED,IAAI,EAAErC,IAAI,CAAC,EAAE;UAC3CiC,IAAI,GAAGK,IAAI;QACf;QACA,oBAAO5C,OAAA,CAACR,SAAS;UAACqD,IAAI,EAAE,YAAa;UAACC,KAAK,EAAEP,IAAI,KAAKN,SAAS,GAAGvC,aAAa,CAACU,IAAI,CAACmC,IAAI,CAAC,CAAC,CAAC,GAAGlC,YAAY,GAAGkC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGN;QAAU,GAAMN,CAAC;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAI;MACnJ,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACA,eACNrC,OAAA;MAAKoB,SAAS,EAAC,oBAAoB;MAACE,KAAK,EAAE;QAAEC,mBAAmB,EAAG,UAASlB,YAAa,SAAQ;QAAEmB,gBAAgB,EAAG,UAASL,SAAS,GAAG,CAAE;MAAS,CAAE;MAAAE,QAAA,EACnJiB,KAAK,CAACC,IAAI,CAAC;QAAE5B,MAAM,EAAE,CAACQ,SAAS,GAAG,CAAC,IAAId;MAAa,CAAC,EAAE,CAACmC,CAAC,EAAEb,CAAC,KAAK;QAC9D,MAAMc,GAAG,GAAGb,IAAI,CAACC,KAAK,CAACF,CAAC,GAAGtB,YAAY,CAAC;QACxC,MAAMqC,MAAM,GAAGf,CAAC,GAAGtB,YAAY;QAC/B,MAAMsC,IAAI,GAAG,CAACF,GAAG,EAAEC,MAAM,CAAC;QAC1B,MAAME,IAAI,GAAG,CAACH,GAAG,GAAG,CAAC,EAAEC,MAAM,CAAC;QAC9B,IAAIH,IAAI;QACR,IAAI5C,gBAAgB,CAACgD,IAAI,EAAEC,IAAI,EAAEtC,IAAI,CAAC,EAAE;UACpCiC,IAAI,GAAGI,IAAI;QACf,CAAC,MAAM,IAAIhD,gBAAgB,CAACiD,IAAI,EAAED,IAAI,EAAErC,IAAI,CAAC,EAAE;UAC3CiC,IAAI,GAAGK,IAAI;QACf;QACA,oBAAO5C,OAAA,CAACR,SAAS;UAACqD,IAAI,EAAE,UAAW;UAACC,KAAK,EAAEP,IAAI,KAAKN,SAAS,GAAGvC,aAAa,CAACU,IAAI,CAACmC,IAAI,CAAC,CAAC,CAAC,GAAGlC,YAAY,GAAGkC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGN;QAAU,GAAMN,CAAC;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAI;MACjJ,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACA,eACNrC,OAAA;MAAKoB,SAAS,EAAC,iBAAiB;MAACE,KAAK,EAAE;QAAEC,mBAAmB,EAAG,UAASlB,YAAY,GAAG,CAAE,SAAQ;QAAEmB,gBAAgB,EAAG,UAASL,SAAS,GAAG,CAAE;MAAS,CAAE;MAAAE,QAAA,EACpJiB,KAAK,CAACC,IAAI,CAAC;QAAE5B,MAAM,EAAE,CAACQ,SAAS,GAAG,CAAC,KAAKd,YAAY,GAAG,CAAC;MAAE,CAAC,EAAE,CAACmC,CAAC,EAAEb,CAAC,KAAK;QACpE,MAAMc,GAAG,GAAGb,IAAI,CAACC,KAAK,CAACF,CAAC,IAAItB,YAAY,GAAG,CAAC,CAAC,CAAC;QAC9C,MAAMqC,MAAM,GAAGf,CAAC,IAAItB,YAAY,GAAG,CAAC,CAAC;QACrC,MAAMsC,IAAI,GAAG,CAACF,GAAG,EAAEC,MAAM,GAAG,CAAC,CAAC;QAC9B,MAAME,IAAI,GAAG,CAACH,GAAG,GAAG,CAAC,EAAEC,MAAM,CAAC;QAC9B,IAAIH,IAAI;QACR,IAAI5C,gBAAgB,CAACgD,IAAI,EAAEC,IAAI,EAAEtC,IAAI,CAAC,EAAE;UACpCiC,IAAI,GAAGI,IAAI;QACf,CAAC,MAAM,IAAIhD,gBAAgB,CAACiD,IAAI,EAAED,IAAI,EAAErC,IAAI,CAAC,EAAE;UAC3CiC,IAAI,GAAGK,IAAI;QACf;QACA,oBAAO5C,OAAA,CAACR,SAAS;UAACqD,IAAI,EAAE,OAAQ;UAACC,KAAK,EAAEP,IAAI,KAAKN,SAAS,GAAGvC,aAAa,CAACU,IAAI,CAACmC,IAAI,CAAC,CAAC,CAAC,GAAGlC,YAAY,GAAGkC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGN;QAAU,GAAMN,CAAC;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAI;MAC9I,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACA,eACNrC,OAAA;MAAKoB,SAAS,EAAC,qBAAqB;MAACE,KAAK,EAAE;QAAEC,mBAAmB,EAAG,UAASlB,YAAY,GAAG,CAAE,SAAQ;QAAEmB,gBAAgB,EAAG,UAASL,SAAS,GAAG,CAAE;MAAS,CAAE;MAAAE,QAAA,EACxJiB,KAAK,CAACC,IAAI,CAAC;QAAE5B,MAAM,EAAE,CAACQ,SAAS,GAAG,CAAC,KAAKd,YAAY,GAAG,CAAC;MAAE,CAAC,EAAE,CAACmC,CAAC,EAAEb,CAAC,KAAK;QACpE,MAAMc,GAAG,GAAGb,IAAI,CAACC,KAAK,CAACF,CAAC,IAAItB,YAAY,GAAG,CAAC,CAAC,CAAC;QAC9C,MAAMqC,MAAM,GAAGf,CAAC,IAAItB,YAAY,GAAG,CAAC,CAAC;QACrC,MAAMsC,IAAI,GAAG,CAACF,GAAG,EAAEC,MAAM,CAAC;QAC1B,MAAME,IAAI,GAAG,CAACH,GAAG,GAAG,CAAC,EAAEC,MAAM,GAAG,CAAC,CAAC;QAClC,IAAIH,IAAI;QACR,IAAI5C,gBAAgB,CAACgD,IAAI,EAAEC,IAAI,EAAEtC,IAAI,CAAC,EAAE;UACpCiC,IAAI,GAAGI,IAAI;QACf,CAAC,MAAM,IAAIhD,gBAAgB,CAACiD,IAAI,EAAED,IAAI,EAAErC,IAAI,CAAC,EAAE;UAC3CiC,IAAI,GAAGK,IAAI;QACf;QACA,oBAAO5C,OAAA,CAACR,SAAS;UAACqD,IAAI,EAAE,WAAY;UAACC,KAAK,EAAEP,IAAI,KAAKN,SAAS,GAAGvC,aAAa,CAACU,IAAI,CAACmC,IAAI,CAAC,CAAC,CAAC,GAAGlC,YAAY,GAAGkC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGN;QAAU,GAAMN,CAAC;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAI;MAClJ,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACA;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACJ;AAGd;AAAClC,EAAA,CArHQF,KAAK;AAAA8C,EAAA,GAAL9C,KAAK;AAuHd,eAAeA,KAAK;AAAC,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}