{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ezequ\\\\Desktop\\\\Estudio\\\\UNS\\\\Tercer A\\xF1o\\\\Primer cuatrimestre\\\\L\\xF3gica para ciencias de la computaci\\xF3n\\\\Proyecto\\\\tic-tac-toe\\\\src\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport PengineClient from './PengineClient';\nimport Board from './Board';\nimport { joinResult } from './util';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet pengine;\nfunction Game() {\n  _s();\n  // State\n  const [grid, setGrid] = useState(null);\n  const [numOfColumns, setNumOfColumns] = useState(null);\n  const [score, setScore] = useState(0);\n  const [path, setPath] = useState([]);\n  const [waiting, setWaiting] = useState(false);\n  useEffect(() => {\n    // This is executed just once, after the first render.\n    PengineClient.init(onServerReady);\n  }, []);\n\n  /**\r\n   * Called when the server was successfully initialized\r\n   */\n  function onServerReady(instance) {\n    pengine = instance;\n    const queryS = 'init(Grid, NumOfColumns)';\n    pengine.query(queryS, (success, response) => {\n      if (success) {\n        setGrid(response['Grid']);\n        setNumOfColumns(response['NumOfColumns']);\n      }\n    });\n  }\n\n  /**\r\n   * Called while the user is drawing a path in the grid, each time the path changes.\r\n   */\n  function onPathChange(newPath) {\n    // No effect if waiting.\n    if (waiting) {\n      return;\n    }\n    setPath(newPath);\n    console.log(JSON.stringify(newPath));\n  }\n\n  /**\r\n   * Called when the user finished drawing a path in the grid.\r\n   */\n  function onPathDone() {\n    /*\r\n    Build Prolog query, which will be like:\r\n    join([\r\n          64,4,64,32,16,\r\n          64,8,16,2,32,\r\n          2,4,64,64,2,\r\n          2,4,32,16,4,\r\n          16,4,16,16,16,\r\n          16,64,2,32,32,\r\n          64,2,64,32,64,\r\n          32,2,64,32,4\r\n          ], \r\n          5, \r\n          [[2, 0], [3, 0], [4, 1], [3, 1], [2, 1], [1, 1], [1, 2], [0, 3]],\r\n          RGrids\r\n        ).\r\n    */\n    const gridS = JSON.stringify(grid);\n    const pathS = JSON.stringify(path);\n    const queryS = \"join(\" + gridS + \",\" + numOfColumns + \",\" + pathS + \", RGrids)\";\n    setWaiting(true);\n    pengine.query(queryS, (success, response) => {\n      if (success) {\n        setScore(score + joinResult(path, grid, numOfColumns));\n        setPath([]);\n        animateEffect(response['RGrids']);\n      } else {\n        setWaiting(false);\n      }\n    });\n  }\n\n  /**\r\n   * Displays each grid of the sequence as the current grid in 1sec intervals.\r\n   * @param {number[][]} rGrids a sequence of grids.\r\n   */\n  function animateEffect(rGrids) {\n    setGrid(rGrids[0]);\n    const restRGrids = rGrids.slice(1);\n    if (restRGrids.length > 0) {\n      setTimeout(() => {\n        animateEffect(restRGrids);\n      }, 1000);\n    } else {\n      setWaiting(false);\n    }\n  }\n  if (grid === null) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score\",\n        children: [\"Points: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score\",\n        children: \" | \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score\",\n        children: \"Power-Up:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"score-btn\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"../src/pow.png\",\n          alt: \"buttonpng\",\n          border: \"0\",\n          height: 30\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      grid: grid,\n      numOfColumns: numOfColumns,\n      path: path,\n      onPathChange: onPathChange,\n      onDone: onPathDone\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"VH/neDqkm001lv5tDKQHchVgw84=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useEffect","useState","PengineClient","Board","joinResult","jsxDEV","_jsxDEV","pengine","Game","_s","grid","setGrid","numOfColumns","setNumOfColumns","score","setScore","path","setPath","waiting","setWaiting","init","onServerReady","instance","queryS","query","success","response","onPathChange","newPath","console","log","JSON","stringify","onPathDone","gridS","pathS","animateEffect","rGrids","restRGrids","slice","length","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","border","height","onDone","_c","$RefreshReg$"],"sources":["C:/Users/ezequ/Desktop/Estudio/UNS/Tercer Año/Primer cuatrimestre/Lógica para ciencias de la computación/Proyecto/tic-tac-toe/src/Game.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport PengineClient from './PengineClient';\r\nimport Board from './Board';\r\nimport { joinResult } from './util';\r\n\r\nlet pengine;\r\n\r\nfunction Game() {\r\n\r\n  // State\r\n  const [grid, setGrid] = useState(null);\r\n  const [numOfColumns, setNumOfColumns] = useState(null);\r\n  const [score, setScore] = useState(0);\r\n  const [path, setPath] = useState([]);\r\n  const [waiting, setWaiting] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // This is executed just once, after the first render.\r\n    PengineClient.init(onServerReady);\r\n  }, []);\r\n\r\n  /**\r\n   * Called when the server was successfully initialized\r\n   */\r\n  function onServerReady(instance) {\r\n    pengine = instance;\r\n    const queryS = 'init(Grid, NumOfColumns)';\r\n    pengine.query(queryS, (success, response) => {\r\n      if (success) {\r\n        setGrid(response['Grid']);\r\n        setNumOfColumns(response['NumOfColumns']);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Called while the user is drawing a path in the grid, each time the path changes.\r\n   */\r\n  function onPathChange(newPath) {\r\n    // No effect if waiting.\r\n    if (waiting) {\r\n      return;\r\n    }\r\n    setPath(newPath);\r\n    console.log(JSON.stringify(newPath));\r\n  }\r\n\r\n  /**\r\n   * Called when the user finished drawing a path in the grid.\r\n   */\r\n  function onPathDone() {\r\n    /*\r\n    Build Prolog query, which will be like:\r\n    join([\r\n          64,4,64,32,16,\r\n          64,8,16,2,32,\r\n          2,4,64,64,2,\r\n          2,4,32,16,4,\r\n          16,4,16,16,16,\r\n          16,64,2,32,32,\r\n          64,2,64,32,64,\r\n          32,2,64,32,4\r\n          ], \r\n          5, \r\n          [[2, 0], [3, 0], [4, 1], [3, 1], [2, 1], [1, 1], [1, 2], [0, 3]],\r\n          RGrids\r\n        ).\r\n    */\r\n    const gridS = JSON.stringify(grid);\r\n    const pathS = JSON.stringify(path);\r\n    const queryS = \"join(\" + gridS + \",\" + numOfColumns + \",\" + pathS + \", RGrids)\";\r\n    setWaiting(true);\r\n    pengine.query(queryS, (success, response) => {\r\n      if (success) {\r\n        setScore(score + joinResult(path, grid, numOfColumns));\r\n        setPath([]);\r\n        animateEffect(response['RGrids']);\r\n      } else {\r\n        setWaiting(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Displays each grid of the sequence as the current grid in 1sec intervals.\r\n   * @param {number[][]} rGrids a sequence of grids.\r\n   */\r\n  function animateEffect(rGrids) {\r\n    setGrid(rGrids[0]);\r\n    const restRGrids = rGrids.slice(1);\r\n    if (restRGrids.length > 0) {\r\n      setTimeout(() => {\r\n        animateEffect(restRGrids);\r\n      }, 1000);\r\n    } else {\r\n      setWaiting(false);\r\n    }\r\n  }\r\n\r\n  if (grid === null) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"header\">\r\n        <div className=\"score\">Points: {score}</div>\r\n        <div className=\"score\"> | </div>\r\n        <div className=\"score\">Power-Up:</div>\r\n        <button className=\"score-btn\">\r\n          <img src=\"../src/pow.png\" alt=\"buttonpng\" border=\"0\" height={30}/>\r\n        </button>\r\n      </div>\r\n      <Board\r\n        grid={grid}\r\n        numOfColumns={numOfColumns}\r\n        path={path}\r\n        onPathChange={onPathChange}\r\n        onDone={onPathDone}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,KAAK,MAAM,SAAS;AAC3B,SAASC,UAAU,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,IAAIC,OAAO;AAEX,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EAEd;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACe,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EAE7CD,SAAS,CAAC,MAAM;IACd;IACAE,aAAa,CAACkB,IAAI,CAACC,aAAa,CAAC;EACnC,CAAC,EAAE,EAAE,CAAC;;EAEN;AACF;AACA;EACE,SAASA,aAAaA,CAACC,QAAQ,EAAE;IAC/Bf,OAAO,GAAGe,QAAQ;IAClB,MAAMC,MAAM,GAAG,0BAA0B;IACzChB,OAAO,CAACiB,KAAK,CAACD,MAAM,EAAE,CAACE,OAAO,EAAEC,QAAQ,KAAK;MAC3C,IAAID,OAAO,EAAE;QACXd,OAAO,CAACe,QAAQ,CAAC,MAAM,CAAC,CAAC;QACzBb,eAAe,CAACa,QAAQ,CAAC,cAAc,CAAC,CAAC;MAC3C;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;EACE,SAASC,YAAYA,CAACC,OAAO,EAAE;IAC7B;IACA,IAAIV,OAAO,EAAE;MACX;IACF;IACAD,OAAO,CAACW,OAAO,CAAC;IAChBC,OAAO,CAACC,GAAG,CAACC,IAAI,CAACC,SAAS,CAACJ,OAAO,CAAC,CAAC;EACtC;;EAEA;AACF;AACA;EACE,SAASK,UAAUA,CAAA,EAAG;IACpB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,MAAMC,KAAK,GAAGH,IAAI,CAACC,SAAS,CAACtB,IAAI,CAAC;IAClC,MAAMyB,KAAK,GAAGJ,IAAI,CAACC,SAAS,CAAChB,IAAI,CAAC;IAClC,MAAMO,MAAM,GAAG,OAAO,GAAGW,KAAK,GAAG,GAAG,GAAGtB,YAAY,GAAG,GAAG,GAAGuB,KAAK,GAAG,WAAW;IAC/EhB,UAAU,CAAC,IAAI,CAAC;IAChBZ,OAAO,CAACiB,KAAK,CAACD,MAAM,EAAE,CAACE,OAAO,EAAEC,QAAQ,KAAK;MAC3C,IAAID,OAAO,EAAE;QACXV,QAAQ,CAACD,KAAK,GAAGV,UAAU,CAACY,IAAI,EAAEN,IAAI,EAAEE,YAAY,CAAC,CAAC;QACtDK,OAAO,CAAC,EAAE,CAAC;QACXmB,aAAa,CAACV,QAAQ,CAAC,QAAQ,CAAC,CAAC;MACnC,CAAC,MAAM;QACLP,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;EACE,SAASiB,aAAaA,CAACC,MAAM,EAAE;IAC7B1B,OAAO,CAAC0B,MAAM,CAAC,CAAC,CAAC,CAAC;IAClB,MAAMC,UAAU,GAAGD,MAAM,CAACE,KAAK,CAAC,CAAC,CAAC;IAClC,IAAID,UAAU,CAACE,MAAM,GAAG,CAAC,EAAE;MACzBC,UAAU,CAAC,MAAM;QACfL,aAAa,CAACE,UAAU,CAAC;MAC3B,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,MAAM;MACLnB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF;EAEA,IAAIT,IAAI,KAAK,IAAI,EAAE;IACjB,OAAO,IAAI;EACb;EACA,oBACEJ,OAAA;IAAKoC,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACnBrC,OAAA;MAAKoC,SAAS,EAAC,QAAQ;MAAAC,QAAA,gBACrBrC,OAAA;QAAKoC,SAAS,EAAC,OAAO;QAAAC,QAAA,GAAC,UAAQ,EAAC7B,KAAK;MAAA;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAO,eAC5CzC,OAAA;QAAKoC,SAAS,EAAC,OAAO;QAAAC,QAAA,EAAC;MAAG;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eAChCzC,OAAA;QAAKoC,SAAS,EAAC,OAAO;QAAAC,QAAA,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eACtCzC,OAAA;QAAQoC,SAAS,EAAC,WAAW;QAAAC,QAAA,eAC3BrC,OAAA;UAAK0C,GAAG,EAAC,gBAAgB;UAACC,GAAG,EAAC,WAAW;UAACC,MAAM,EAAC,GAAG;UAACC,MAAM,EAAE;QAAG;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC3D;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACL,eACNzC,OAAA,CAACH,KAAK;MACJO,IAAI,EAAEA,IAAK;MACXE,YAAY,EAAEA,YAAa;MAC3BI,IAAI,EAAEA,IAAK;MACXW,YAAY,EAAEA,YAAa;MAC3ByB,MAAM,EAAEnB;IAAW;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACnB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACE;AAEV;AAACtC,EAAA,CAlHQD,IAAI;AAAA6C,EAAA,GAAJ7C,IAAI;AAoHb,eAAeA,IAAI;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}