{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ezequ\\\\Desktop\\\\Estudio\\\\UNS\\\\Tercer A\\xF1o\\\\Primer cuatrimestre\\\\L\\xF3gica para ciencias de la computaci\\xF3n\\\\Proyecto\\\\Proyecto-LCC\\\\src\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport PengineClient from './PengineClient';\nimport Board from './Board';\nimport { joinResult, numberToColor, smallerPow2GreaterOrEqualThan } from './util';\nimport MyImage from './/pow.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet pengine;\nfunction Game() {\n  _s();\n  // State\n  const [grid, setGrid] = useState(null);\n  const [numOfColumns, setNumOfColumns] = useState(null);\n  const [score, setScore] = useState(0);\n  const [path, setPath] = useState([]);\n  const [waiting, setWaiting] = useState(false);\n  let test = document.getElementById('test');\n  useEffect(() => {\n    // This is executed just once, after the first render.\n    PengineClient.init(onServerReady);\n  }, []);\n\n  /**\r\n   * Called when the server was successfully initialized\r\n   */\n  function onServerReady(instance) {\n    pengine = instance;\n    const queryS = 'init(Grid, NumOfColumns)';\n    pengine.query(queryS, (success, response) => {\n      if (success) {\n        setGrid(response['Grid']);\n        setNumOfColumns(response['NumOfColumns']);\n      }\n    });\n  }\n\n  /**\r\n   * Called while the user is drawing a path in the grid, each time the path changes.\r\n   */\n  function onPathChange(newPath) {\n    // No effect if waiting.\n    if (waiting) {\n      return;\n    }\n    setPath(newPath);\n    console.log(newPath);\n    if (newPath.length === 0) {\n      test.className = \"score\";\n      test.textContent = \"Points: \" + {\n        score\n      };\n      test.style.backgroundColor = \"white\";\n    } else {\n      test.className = \"squareInPath\";\n      test.textContent = nextBlock(newPath);\n      test.style.backgroundColor = numberToColor(parseInt(test.textContent));\n    }\n    console.log(JSON.stringify(newPath));\n  }\n  function nextBlock(path) {\n    let res = 0;\n    for (let i = 0; i < path.length; i++) {\n      res += grid[path[i][0] * numOfColumns + path[i][1]];\n    }\n    return smallerPow2GreaterOrEqualThan(res);\n  }\n  /**\r\n   * Called when the user finished drawing a path in the grid.\r\n   */\n  function onPathDone() {\n    /*\r\n    Build Prolog query, which will be like:\r\n    join([\r\n          64,4,64,32,16,\r\n          64,8,16,2,32,\r\n          2,4,64,64,2,\r\n          2,4,32,16,4,\r\n          16,4,16,16,16,\r\n          16,64,2,32,32,\r\n          64,2,64,32,64,\r\n          32,2,64,32,4\r\n          ], \r\n          5, \r\n          [[2, 0], [3, 0], [4, 1], [3, 1], [2, 1], [1, 1], [1, 2], [0, 3]],\r\n          RGrids\r\n        ).\r\n    */\n    test.className = \"score\";\n    test.textContent = \"Points: \" + {\n      score\n    };\n    test.style.backgroundColor = \"white\";\n    const gridS = JSON.stringify(grid);\n    const pathS = JSON.stringify(path);\n    const queryS = \"join(\" + gridS + \",\" + numOfColumns + \",\" + pathS + \", RGrids)\";\n    setWaiting(true);\n    pengine.query(queryS, (success, response) => {\n      if (success) {\n        setScore(score + joinResult(path, grid, numOfColumns));\n        setPath([]);\n        animateEffect(response['RGrids']);\n      } else {\n        setWaiting(false);\n      }\n    });\n  }\n\n  /**\r\n   * Displays each grid of the sequence as the current grid in 1sec intervals.\r\n   * @param {number[][]} rGrids a sequence of grids.\r\n   */\n  function animateEffect(rGrids) {\n    setGrid(rGrids[0]);\n    const restRGrids = rGrids.slice(1);\n    if (restRGrids.length > 0) {\n      setTimeout(() => {\n        animateEffect(restRGrids);\n      }, 1000);\n    } else {\n      setWaiting(false);\n    }\n  }\n  function boosterEffect() {\n    let sum = JSON.stringify(0);\n    const gridS = JSON.stringify(grid);\n    const queryS = \"boost(\" + gridS + \",\" + numOfColumns + \",\" + sum + \", RGrids)\";\n    setWaiting(true);\n    pengine.query(queryS, (success, response) => {\n      if (success) {\n        setScore(score + sum);\n        animateEffect(response['RGrids']);\n      } else {\n        setWaiting(false);\n      }\n    });\n  }\n  if (grid === null) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"test\",\n        className: \"score\",\n        children: [\"Points: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score\",\n        children: \" | \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score\",\n        children: \"Power-Up:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: boosterEffect,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: MyImage,\n          alt: \"buttonpng\",\n          border: \"0\",\n          height: 30\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      grid: grid,\n      numOfColumns: numOfColumns,\n      path: path,\n      onPathChange: onPathChange,\n      onDone: onPathDone\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"VH/neDqkm001lv5tDKQHchVgw84=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useEffect","useState","PengineClient","Board","joinResult","numberToColor","smallerPow2GreaterOrEqualThan","MyImage","jsxDEV","_jsxDEV","pengine","Game","_s","grid","setGrid","numOfColumns","setNumOfColumns","score","setScore","path","setPath","waiting","setWaiting","test","document","getElementById","init","onServerReady","instance","queryS","query","success","response","onPathChange","newPath","console","log","length","className","textContent","style","backgroundColor","nextBlock","parseInt","JSON","stringify","res","i","onPathDone","gridS","pathS","animateEffect","rGrids","restRGrids","slice","setTimeout","boosterEffect","sum","children","id","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","border","height","onDone","_c","$RefreshReg$"],"sources":["C:/Users/ezequ/Desktop/Estudio/UNS/Tercer Año/Primer cuatrimestre/Lógica para ciencias de la computación/Proyecto/Proyecto-LCC/src/Game.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport PengineClient from './PengineClient';\r\nimport Board from './Board';\r\nimport { joinResult, numberToColor, smallerPow2GreaterOrEqualThan } from './util';\r\nimport MyImage from './/pow.png';\r\n\r\nlet pengine;\r\n\r\nfunction Game() {\r\n\r\n  // State\r\n  const [grid, setGrid] = useState(null);\r\n  const [numOfColumns, setNumOfColumns] = useState(null);\r\n  const [score, setScore] = useState(0);\r\n  const [path, setPath] = useState([]);\r\n  const [waiting, setWaiting] = useState(false);\r\n  let test = document.getElementById('test');\r\n\r\n  useEffect(() => {\r\n    // This is executed just once, after the first render.\r\n    PengineClient.init(onServerReady);\r\n  }, []);\r\n\r\n  /**\r\n   * Called when the server was successfully initialized\r\n   */\r\n  function onServerReady(instance) {\r\n    pengine = instance;\r\n    const queryS = 'init(Grid, NumOfColumns)';\r\n    pengine.query(queryS, (success, response) => {\r\n      if (success) {\r\n        setGrid(response['Grid']);\r\n        setNumOfColumns(response['NumOfColumns']);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Called while the user is drawing a path in the grid, each time the path changes.\r\n   */\r\n  function onPathChange(newPath) {\r\n    // No effect if waiting.\r\n    if (waiting) {\r\n      return;\r\n    }\r\n    setPath(newPath);\r\n    console.log(newPath);\r\n    if(newPath.length===0) {\r\n      test.className = \"score\";\r\n      test.textContent = \"Points: \"+{score};\r\n      test.style.backgroundColor = \"white\";\r\n    } else {\r\n      test.className = \"squareInPath\";\r\n      test.textContent = nextBlock(newPath)\r\n      test.style.backgroundColor = numberToColor(parseInt(test.textContent));\r\n    }\r\n    console.log(JSON.stringify(newPath));\r\n  }\r\n\r\n  function nextBlock(path) {\r\n    let res = 0;\r\n    for (let i = 0; i < path.length; i++) {\r\n      res += grid[path[i][0]*numOfColumns+path[i][1]];\r\n    }\r\n    return smallerPow2GreaterOrEqualThan(res);\r\n  }\r\n  /**\r\n   * Called when the user finished drawing a path in the grid.\r\n   */\r\n  function onPathDone() {\r\n    /*\r\n    Build Prolog query, which will be like:\r\n    join([\r\n          64,4,64,32,16,\r\n          64,8,16,2,32,\r\n          2,4,64,64,2,\r\n          2,4,32,16,4,\r\n          16,4,16,16,16,\r\n          16,64,2,32,32,\r\n          64,2,64,32,64,\r\n          32,2,64,32,4\r\n          ], \r\n          5, \r\n          [[2, 0], [3, 0], [4, 1], [3, 1], [2, 1], [1, 1], [1, 2], [0, 3]],\r\n          RGrids\r\n        ).\r\n    */\r\n    test.className = \"score\";\r\n    test.textContent = \"Points: \"+{score};\r\n    test.style.backgroundColor = \"white\";\r\n    const gridS = JSON.stringify(grid);\r\n    const pathS = JSON.stringify(path);\r\n    const queryS = \"join(\" + gridS + \",\" + numOfColumns + \",\" + pathS + \", RGrids)\";\r\n    setWaiting(true);\r\n    pengine.query(queryS, (success, response) => {\r\n      if (success) {\r\n        setScore(score + joinResult(path, grid, numOfColumns));\r\n        setPath([]);\r\n        animateEffect(response['RGrids']);\r\n      } else {\r\n        setWaiting(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Displays each grid of the sequence as the current grid in 1sec intervals.\r\n   * @param {number[][]} rGrids a sequence of grids.\r\n   */\r\n  function animateEffect(rGrids) {\r\n    setGrid(rGrids[0]);\r\n    const restRGrids = rGrids.slice(1);\r\n    if (restRGrids.length > 0) {\r\n      setTimeout(() => {\r\n        animateEffect(restRGrids);\r\n      }, 1000);\r\n    } else {\r\n      setWaiting(false);\r\n    }\r\n  }\r\n\r\n  function boosterEffect() {\r\n    let sum = JSON.stringify(0);\r\n    const gridS = JSON.stringify(grid);\r\n    const queryS = \"boost(\" + gridS + \",\" + numOfColumns + \",\" + sum + \", RGrids)\";\r\n    setWaiting(true);\r\n    pengine.query(queryS, (success, response) => {\r\n      if (success) {\r\n        setScore(score + sum);\r\n        animateEffect(response['RGrids']);\r\n      } else {\r\n        setWaiting(false);\r\n      }\r\n    });\r\n  }\r\n  if (grid === null) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"header\">\r\n        <div id = \"test\" className=\"score\">Points: {score}</div>\r\n        <div className=\"score\"> | </div>\r\n        <div className=\"score\">Power-Up:</div>\r\n        <button className=\"btn\" onClick={boosterEffect}>\r\n          <img src={MyImage} alt=\"buttonpng\" border=\"0\" height={30}/>\r\n        </button>\r\n      </div>\r\n      <Board\r\n        grid={grid}\r\n        numOfColumns={numOfColumns}\r\n        path={path}\r\n        onPathChange={onPathChange}\r\n        onDone={onPathDone}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}