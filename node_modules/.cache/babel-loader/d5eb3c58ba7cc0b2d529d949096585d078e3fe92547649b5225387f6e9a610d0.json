{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ezequ\\\\Desktop\\\\Estudio\\\\UNS\\\\Tercer A\\xF1o\\\\Primer cuatrimestre\\\\L\\xF3gica para ciencias de la computaci\\xF3n\\\\Proyecto\\\\Proyecto-LCC\\\\src\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport PengineClient from './PengineClient';\nimport Board from './Board';\nimport { joinResult, numberToColor, smallerPow2GreaterOrEqualThan } from './util';\nimport MyImagePow from './/pow.png';\nimport MyImageExc from './/exclam.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet pengine;\nfunction Game() {\n  _s();\n  // State\n  const [grid, setGrid] = useState(null);\n  const [numOfColumns, setNumOfColumns] = useState(null);\n  const [score, setScore] = useState(0);\n  const [path, setPath] = useState([]);\n  const [waiting, setWaiting] = useState(false);\n  let scsq = document.getElementById('score-square');\n  useEffect(() => {\n    // This is executed just once, after the first render.\n    PengineClient.init(onServerReady);\n  }, []);\n\n  /**\r\n  * Called when the server was successfully initialized\r\n  */\n  function onServerReady(instance) {\n    pengine = instance;\n    const queryS = 'init(Grid, NumOfColumns)';\n    pengine.query(queryS, (success, response) => {\n      if (success) {\n        setGrid(response['Grid']);\n        setNumOfColumns(response['NumOfColumns']);\n      }\n    });\n  }\n\n  /**\r\n  * Called while the user is drawing a path in the grid, each time the path changes.\r\n  */\n  function onPathChange(newPath) {\n    // No effect if waiting.\n    if (waiting) {\n      return;\n    }\n    setPath(newPath);\n    if (scsq !== null) {\n      if (newPath.length === 0) {\n        activarScore();\n      } else {\n        desactivarScore(newPath);\n      }\n    }\n    console.log(JSON.stringify(newPath));\n  }\n  function activarScore() {\n    scsq.className = \"score\";\n    scsq.style.backgroundColor = \"white\";\n    scsq.textContent = score.toString();\n  }\n  function desactivarScore(newPath) {\n    scsq.className = \"squareInPath\";\n    scsq.textContent = nextBlock(newPath);\n    scsq.style.backgroundColor = numberToColor(parseInt(scsq.textContent));\n  }\n  function nextBlock(path) {\n    let res = 0;\n    for (let i = 0; i < path.length; i++) {\n      res += grid[path[i][0] * numOfColumns + path[i][1]];\n    }\n    return smallerPow2GreaterOrEqualThan(res);\n  }\n\n  /**\r\n  * Called when the user finished drawing a path in the grid.\r\n  */\n  function onPathDone() {\n    /*\r\n    Build Prolog query, which will be like:\r\n    join([\r\n    \t64,4,64,32,16,\r\n    \t64,8,16,2,32,\r\n    \t2,4,64,64,2,\r\n    \t2,4,32,16,4,\r\n    \t16,4,16,16,16,\r\n    \t16,64,2,32,32,\r\n    \t64,2,64,32,64,\r\n    \t32,2,64,32,4\r\n    \t], \r\n    \t5, \r\n    \t[[2, 0], [3, 0], [4, 1], [3, 1], [2, 1], [1, 1], [1, 2], [0, 3]],\r\n    \tRGrids\r\n    ).\r\n    */\n    activarScore();\n    const gridS = JSON.stringify(grid);\n    const pathS = JSON.stringify(path);\n    const queryS = \"join(\" + gridS + \",\" + numOfColumns + \",\" + pathS + \", RGrids)\";\n    setWaiting(true);\n    pengine.query(queryS, (success, response) => {\n      if (success) {\n        setScore(score + joinResult(path, grid, numOfColumns));\n        setPath([]);\n        animateEffect(response['RGrids']);\n      } else {\n        setWaiting(false);\n      }\n    });\n  }\n\n  /**\r\n  * Displays each grid of the sequence as the current grid in 1sec intervals.\r\n  * @param {number[][]} rGrids a sequence of grids.\r\n  */\n  function animateEffect(rGrids) {\n    setGrid(rGrids[0]);\n    const restRGrids = rGrids.slice(1);\n    if (restRGrids.length > 0) {\n      setTimeout(() => {\n        animateEffect(restRGrids);\n      }, 700);\n    } else {\n      setWaiting(false);\n    }\n  }\n  function boosterEffect() {\n    if (waiting) {\n      return;\n    }\n    if (path.length === 0) {\n      const gridS = JSON.stringify(grid);\n      const pathS = JSON.stringify(path);\n      const queryS = \"join(\" + gridS + \",\" + numOfColumns + \",\" + pathS + \", RGrids)\";\n      setWaiting(true);\n      pengine.query(queryS, (success, response) => {\n        if (success) {\n          animateEffect(response['RGrids']);\n        } else {\n          setWaiting(false);\n        }\n      });\n    }\n  }\n  if (grid === null) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"score-square\",\n        className: \"score\",\n        children: score\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score\",\n        children: \" | \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score\",\n        children: \"Colapsar iguales:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: boosterEffect,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: MyImagePow,\n          alt: \"buttonpng\",\n          border: \"0\",\n          height: 30\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score\",\n        children: \"    | \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score\",\n        children: \"Movida m\\xE1xima:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: boosterEffect,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: MyImageExc,\n          alt: \"buttonpng\",\n          border: \"0\",\n          height: 30\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      grid: grid,\n      numOfColumns: numOfColumns,\n      path: path,\n      onPathChange: onPathChange,\n      onDone: onPathDone\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 3\n  }, this);\n}\n_s(Game, \"VH/neDqkm001lv5tDKQHchVgw84=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useEffect","useState","PengineClient","Board","joinResult","numberToColor","smallerPow2GreaterOrEqualThan","MyImagePow","MyImageExc","jsxDEV","_jsxDEV","pengine","Game","_s","grid","setGrid","numOfColumns","setNumOfColumns","score","setScore","path","setPath","waiting","setWaiting","scsq","document","getElementById","init","onServerReady","instance","queryS","query","success","response","onPathChange","newPath","length","activarScore","desactivarScore","console","log","JSON","stringify","className","style","backgroundColor","textContent","toString","nextBlock","parseInt","res","i","onPathDone","gridS","pathS","animateEffect","rGrids","restRGrids","slice","setTimeout","boosterEffect","children","id","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","border","height","onDone","_c","$RefreshReg$"],"sources":["C:/Users/ezequ/Desktop/Estudio/UNS/Tercer Año/Primer cuatrimestre/Lógica para ciencias de la computación/Proyecto/Proyecto-LCC/src/Game.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport PengineClient from './PengineClient';\r\nimport Board from './Board';\r\nimport { joinResult, numberToColor, smallerPow2GreaterOrEqualThan } from './util';\r\nimport MyImagePow from './/pow.png';\r\nimport MyImageExc from './/exclam.png';\r\n\r\nlet pengine;\r\n\r\nfunction Game() {\r\n\r\n\t// State\r\n\tconst [grid, setGrid] = useState(null);\r\n\tconst [numOfColumns, setNumOfColumns] = useState(null);\r\n\tconst [score, setScore] = useState(0);\r\n\tconst [path, setPath] = useState([]);\r\n\tconst [waiting, setWaiting] = useState(false);\r\n\r\n\tlet scsq = document.getElementById('score-square');\r\n\r\n\tuseEffect(() => {\r\n    \t// This is executed just once, after the first render.\r\n\t\tPengineClient.init(onServerReady);\r\n\t}, []);\r\n\r\n\t/**\r\n\t* Called when the server was successfully initialized\r\n\t*/\r\n\tfunction onServerReady(instance) {\r\n\t\tpengine = instance;\r\n\t\tconst queryS = 'init(Grid, NumOfColumns)';\r\n\t\tpengine.query(queryS, (success, response) => {\r\n\t\t\tif (success) {\r\n\t\t\t\tsetGrid(response['Grid']);\r\n\t\t\t\tsetNumOfColumns(response['NumOfColumns']);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t* Called while the user is drawing a path in the grid, each time the path changes.\r\n\t*/\r\n\tfunction onPathChange(newPath) {\r\n\t\t// No effect if waiting.\r\n\t\tif (waiting) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tsetPath(newPath);\r\n\t\tif (scsq !== null) {\r\n\t\t\tif(newPath.length===0) {\r\n\t\t\t\tactivarScore();\r\n\t\t\t} else {\r\n\t\t\t\tdesactivarScore(newPath);\r\n\t\t\t}\r\n\t\t}\r\n\t\tconsole.log(JSON.stringify(newPath));\r\n\t}\r\n\r\n\tfunction activarScore() {\r\n\t\tscsq.className = \"score\";\r\n\t\tscsq.style.backgroundColor = \"white\";\r\n\t\tscsq.textContent = score.toString();\r\n\t}\r\n\r\n\tfunction desactivarScore(newPath) {\r\n\t\tscsq.className = \"squareInPath\";\r\n\t\tscsq.textContent = nextBlock(newPath);\r\n\t\tscsq.style.backgroundColor = numberToColor(parseInt(scsq.textContent));\r\n\t}\r\n\r\n\tfunction nextBlock(path) {\r\n\t\tlet res = 0;\r\n\t\tfor (let i = 0; i < path.length; i++) {\r\n\t\t\tres += grid[path[i][0]*numOfColumns+path[i][1]];\r\n\t\t}\r\n\t\treturn smallerPow2GreaterOrEqualThan(res);\r\n\t}\r\n\r\n\t/**\r\n\t* Called when the user finished drawing a path in the grid.\r\n\t*/\r\n\tfunction onPathDone() {\r\n\t\t/*\r\n\t\tBuild Prolog query, which will be like:\r\n\t\tjoin([\r\n\t\t\t64,4,64,32,16,\r\n\t\t\t64,8,16,2,32,\r\n\t\t\t2,4,64,64,2,\r\n\t\t\t2,4,32,16,4,\r\n\t\t\t16,4,16,16,16,\r\n\t\t\t16,64,2,32,32,\r\n\t\t\t64,2,64,32,64,\r\n\t\t\t32,2,64,32,4\r\n\t\t\t], \r\n\t\t\t5, \r\n\t\t\t[[2, 0], [3, 0], [4, 1], [3, 1], [2, 1], [1, 1], [1, 2], [0, 3]],\r\n\t\t\tRGrids\r\n\t\t).\r\n\t\t*/\r\n\t\tactivarScore();\r\n\t\tconst gridS = JSON.stringify(grid);\r\n\t\tconst pathS = JSON.stringify(path);\r\n\t\tconst queryS = \"join(\" + gridS + \",\" + numOfColumns + \",\" + pathS + \", RGrids)\";\r\n\t\tsetWaiting(true);\r\n\t\tpengine.query(queryS, (success, response) => {\r\n\t\tif (success) {\r\n\t\t\tsetScore(score + joinResult(path, grid, numOfColumns));\r\n\t\t\tsetPath([]);\r\n\t\t\tanimateEffect(response['RGrids']);\r\n\t\t} else {\r\n\t\t\tsetWaiting(false);\r\n\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t* Displays each grid of the sequence as the current grid in 1sec intervals.\r\n\t* @param {number[][]} rGrids a sequence of grids.\r\n\t*/\r\n\tfunction animateEffect(rGrids) {\r\n\t\tsetGrid(rGrids[0]);\r\n\t\tconst restRGrids = rGrids.slice(1);\r\n\t\tif (restRGrids.length > 0) {\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tanimateEffect(restRGrids);\r\n\t\t\t}, 700);\r\n\t\t} else {\r\n\t\t\tsetWaiting(false);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction boosterEffect() {\r\n\t\tif (waiting) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(path.length===0) {\r\n\t\t\tconst gridS = JSON.stringify(grid);\r\n\t\t\tconst pathS = JSON.stringify(path);\r\n\t\t\tconst queryS = \"join(\" + gridS + \",\" + numOfColumns + \",\" + pathS + \", RGrids)\";\r\n\t\t\tsetWaiting(true);\r\n\t\t\tpengine.query(queryS, (success, response) => {\r\n\t\t\tif (success) {\r\n\t\t\t\tanimateEffect(response['RGrids']);\r\n\t\t\t} else {\r\n\t\t\t\tsetWaiting(false);\r\n\t\t\t}\r\n\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tif (grid === null) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"game\">\r\n\t\t\t<div className=\"header\">\r\n\t\t\t\t<div id = \"score-square\" className=\"score\">{score}</div>\r\n\t\t\t\t<div className=\"score\"> | </div>\r\n\t\t\t\t<div className=\"score\">Colapsar iguales:</div>\r\n\t\t\t\t<button className=\"btn\" onClick={boosterEffect}>\r\n\t\t\t\t\t<img src={MyImagePow} alt=\"buttonpng\" border=\"0\" height={30}/>\r\n\t\t\t\t</button>\r\n\t\t\t\t<div className=\"score\">    | </div>\r\n\t\t\t\t<div className=\"score\">Movida máxima:</div>\r\n\t\t\t\t<button className=\"btn\" onClick={boosterEffect}>\r\n\t\t\t\t\t<img src={MyImageExc} alt=\"buttonpng\" border=\"0\" height={30}/>\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t\t<Board\r\n\t\t\t\tgrid={grid}\r\n\t\t\t\tnumOfColumns={numOfColumns}\r\n\t\t\t\tpath={path}\r\n\t\t\t\tonPathChange={onPathChange}\r\n\t\t\t\tonDone={onPathDone}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Game;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}